from django.db import models
import logging
from django.contrib.sites.models import Site
from django.utils.translation import gettext as _
from managers import CategoryManagerSet

# Create your models here.

log = logging.getLogger('product.models')

dimension_units = (('cm', 'cm'), ('in', 'in'))

weight_units = (('kg', 'kg'))


class Category(models.Model):
    """
    Basic heirarchical category model for storing products
    """
    site = models.ManyToManyField(Site, verbose_name = _('Site'))
    name = models.CharField('Name', max_length=200)
    slug = models.SlugField(_("Slug"), help_text= _("Used for URLS, auto-generated from name if blank"), blank=True)
    parent = models.ForeignKey('self', blank=True, null=True, related_name='child')
    meta = models.TextField(_("Meta Description"), blank=True, null= True, help_text=_("Meta Description for this category"))
    description = models.TextField(_("Description"), blank=True, help_text="Optional")
    #ordering = models.IntegerField(_("Ordering"), default=0, help_text=_("Override alphabateical order in category display"))
    is_active = models.BooleanField(_("Active"), default=True, blank=True)
    related_categories = models.ManyToManyField('self', blank=True, verbose_name=_('Related Cateogories'), related_name='related_categories')
    objects = CategoryManagerSet.as_manager()

    class Meta:
        verbose_name = 'Category'
        verbose_name_plural = 'Categories'

    def __unicode__(self):
        return self.name

    def __repr__(self):
        return self.name


class CategoryImage(models.Model):
    """
        A picture of an item. Can have many pictures associated with an item. Thumbnails are automatically created
    """

    category = models.ForeignKey(Category, null=True, blank=True, related_name="images")
    caption = models.CharField(_("Optional caption"), max_length = 100, null = True, blank=True)
    sort = models.IntegerField(_("Sort Order"), default = 0)

    class Meta:
        #ordering = ['sort']
        unique_together = (('category', 'sort'))
        verbose_name = _("Category Image")
        verbose_name_plural = _("Category Images")


class Product(models.Model):
    """
    Rootclass for all products
    """
    site = models.ManyToManyField(Site, verbose_name=_("Site"))
    name = models.CharField(_("Full Name"), max_length=255, blank=False, help_text=_("This is what the product will be called in the default site language.  To add non-default translations, use the Product Translation section below."))
    slug = models.SlugField(_("Slug Name"), blank=True, help_text=_("Used for urls, autogenerated from blank"))
    short_description = models.TextField(_("Short Description of product"), help_text=_("This should be 1 or 2 line description of the product."), max_length=200, default='', blank = True)
    category = models.ManyToManyField(Category, blank=True, verbose_name=_("Category"))
    meta = models.TextField(_("Meta description"), max_length=200, blank=True, null = True, help_text=_("Meta description for this product"))
    created_at = models.DateField(_("Date added"), null=True, blank=True, auto_now_add=True)
    updated_at = models.DateField(_("Date modified"), null=True, blank=True, auto_now=True)
    active = models.IntegerField(_("Active"), default=True, help_text=_("This will determine whether a product should be active for display or not"))
    featured = models.BooleanField("Featured", default=False, help_text=_("Featured Items will show on the front page"))
    #ordering = models.IntegerField(_("Ordering"), default=0, help_text=_("Override alphabetical order in category display"))
    weight = models.DecimalField(_("Weight"), max_digits=6, decimal_places=2, null=True, blank=True)
    weight_units = models.CharField(_("Weight Units"), max_length=3, null=True, blank=True)
    width = models.DecimalField(_("Width"), max_digits=6, decimal_places=2, null=True, blank=True)
    height = models.CharField(_("Height"), max_length=3, null=True, blank=True)
    height_units = models.DecimalField(_("Height Units"), max_digits=6, decimal_places=2, null=True, blank=True)
    price = models.DecimalField("Price", max_digits=6, decimal_places=2, null=False, blank=False)
    prepopulated_fields = {"slug" : ("name",)}

    class Meta:
        verbose_name= _("Product Page")
        verbose_name_plural =_("Products Page")
        #ordering = ('product', 'name')

    def get_price(self):
        return self.price

    def __unicode__(self):
        return u"Product %s" %(self.name)


class ProductImage(models.Model):
    product = models.ForeignKey(Product)
    image = models.ImageField(upload_to='products/images')
    featured = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    thumbnail = models.BooleanField(default=False)
    active = models.BooleanField(default=True)

    def __unicode__(self):
        self.product.title
